from src import db
from src.Models.{{ entity.nameEntity }}Entity import {{ entity.nameEntity }}Entity
from typing import List
from src.Config.Logger import Logger

class {{ entity.nameEntity }}Repository:
    log = Logger({{ entity.nameEntity }}Repository)

    def save(self, entity: {{ entity.nameEntity }}Entity) -> {{ entity.nameEntity }}Entity:
        self.log.debug("save", "call")
        try:
            db.session.add(entity)
            db.session.flush()
            id = entity.{{ entity.getPrimaryKey().nameColumn }}
            db.session.commit()
            return self.getById(id)
        except Exception as e:
            self.log.error("save", e)

    def getById(self, id: int) -> {{ entity.nameEntity }}Entity:
        self.log.debug("getById", "call")
        try:
            return db.session.query({{ entity.nameEntity }}Entity).filter_by({{ entity.getPrimaryKey().nameColumn }} = id).first()
        except Exception as e:
            self.log.error("getById", e)
            return None

    def get(self) -> List[{{ entity.nameEntity }}Entity]:
        self.log.debug("get", "call")
        try:
            return db.session.query({{ entity.nameEntity }}Entity).all()
        except Exception as e:
            self.log.error("get", e)
            return list()

    def remove(self, entity: {{ entity.nameEntity }}Entity) -> bool:
        self.log.debug("remove", "call")
        try:
            if self.getById(entity.{{ entity.getPrimaryKey().nameColumn }}) != None:
                db.session.delete(entity)
                db.session.commit()
                return True
            else:
                return False
        except Exception as e:
            self.log.error("remove", e)
            return False