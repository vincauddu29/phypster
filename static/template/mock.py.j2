from src.Models.{{ entity.nameEntity }}Entity import {{ entity.nameEntity }}Entity
import random
from faker import Faker
from src import app, db
from typing import List
{% for enumColumn in entity.enums %}
from src.Enums.{{ enumColumn.enum.nameEnum }}Enum import {{ enumColumn.enum.nameEnum }}Enum
{% endfor %}

class {{ entity.nameEntity }}Mock:
    fake = Faker()
    fake.seed({{ entity.getRandomInt() }})
    {%- for step_var in ['DEFAULT', 'UPDATE'] %}
    {% for column in entity.columns %}
    {{ entity.nameEntity | upper }}_ENTITY_{{ column.nameColumn | upper }}_{{ step_var }} =
    {%- if column.typeData == 'String' -%}
        fake.word()
    {%- elif column.typeData == 'Integer' -%}
        fake.pyint()
    {%- elif column.typeData == 'Numeric' -%}
        fake.pydecimal()
    {%- elif column.typeData == 'Float' -%}
        fake.pyfloat()
    {%- elif column.typeData == 'DateTime' -%}
        fake.date_time()
    {%- elif column.typeData == 'Boolean' -%}
        fake.pybool()
    {%- endif %}
    {%- endfor %}
    {%- endfor %}
    {% for enumColumn in entity.enums %}
    {{ entity.nameEntity | upper }}_ENTITY_{{ enumColumn.enum.nameEnum | upper }}_DEFAULT = {{ enumColumn.enum.nameEnum }}Enum.{{ enumColumn.enum.listItems[0] }}
    {{ entity.nameEntity | upper }}_ENTITY_{{ enumColumn.enum.nameEnum | upper }}_UPDATE = {{ enumColumn.enum.nameEnum }}Enum.{{ enumColumn.enum.listItems[1] }}
    {% endfor %}

    def createEntityWithoutRelationship(self, id = None) -> {{ entity.nameEntity }}Entity:
        {{ entity.nameEntity | lower }}Entity = {{ entity.nameEntity }}Entity()
        if id == None:
            {{ entity.nameEntity | lower }}Entity.{{ entity.getPrimaryKey().nameColumn }} = random.randint(1, 2000)
        else:
            {{ entity.nameEntity | lower }}Entity.{{ entity.getPrimaryKey().nameColumn }} = id
        {%- for column in entity.columns %}
        {{ entity.nameEntity | lower }}Entity.{{ column.nameColumn }} = self.{{ entity.nameEntity | upper }}_ENTITY_{{ column.nameColumn | upper }}_DEFAULT
        {%- endfor %}
        {% for enumColumn in entity.enums %}
        {{ entity.nameEntity | lower }}Entity.{{ enumColumn.enum.nameEnum.lower() }} = self.{{ entity.nameEntity | upper }}_ENTITY_{{ enumColumn.enum.nameEnum | upper }}_DEFAULT
        {% endfor %}
        return {{ entity.nameEntity | lower }}Entity

    def createEntityWithRelationship(self, id = None
        {%- for relationship in entity.relationships -%}    
            {%- if relationship.isOneToOne -%}
                {%- if relationship.entity1 == entity -%}
                    , {{ relationship.entity2.nameEntity | lower }} = None
                {%- else -%}
                    , {{ relationship.entity1.nameEntity | lower }} = None
                {%- endif -%}
            {%- elif relationship.isManyToOne -%}
                {%- if relationship.entity1 == entity -%}
                    , {{ relationship.entity2.nameEntity | lower }} = None
                {%- else -%}
                    , {{ relationship.entity1.nameEntity | lower }} = None
                {%- endif -%}
            {%- elif relationship.isOneToMany -%}
                {%- if relationship.entity1 == entity -%}
                    , {{ relationship.entity2.nameEntity | lower }} = None
                {%- else -%}
                    , {{ relationship.entity1.nameEntity | lower }} = None
                {%- endif -%}
            {%- else -%}
                {%- if relationship.entity1 == entity -%}
                    , {{ relationship.entity2.nameEntity | lower }} = None
                {%- else -%}
                    , {{ relationship.entity1.nameEntity | lower }} = None
                {%- endif -%}
            {%- endif -%}
        {%- endfor -%}
    ) -> {{ entity.nameEntity }}Entity:
        {%- for relationship in entity.relationships -%}    
        {%- if relationship.isOneToOne %}
            {%- if relationship.entity1 == entity %}
        from .{{ relationship.entity2.nameEntity }}Mock import {{ relationship.entity2.nameEntity }}Mock
                {%- else %}
        from .{{ relationship.entity1.nameEntity }}Mock import {{ relationship.entity1.nameEntity }}Mock
                {%- endif %}
            {%- elif relationship.isManyToOne %}
                {%- if relationship.entity1 == entity %}
        from .{{ relationship.entity2.nameEntity }}Mock import {{ relationship.entity2.nameEntity }}Mock
                {% else %}
        from .{{ relationship.entity1.nameEntity }}Mock import {{ relationship.entity1.nameEntity }}Mock
                {%- endif %}
            {%- elif relationship.isOneToMany %}
                {%- if relationship.entity1 == entity %}
        from .{{ relationship.entity2.nameEntity }}Mock import {{ relationship.entity2.nameEntity }}Mock
                {%- else %}
        from .{{ relationship.entity1.nameEntity }}Mock import {{ relationship.entity1.nameEntity }}Mock
                {%- endif %}
            {%- else %}
                {%- if relationship.entity1 == entity %}
        from .{{ relationship.entity2.nameEntity }}Mock import {{ relationship.entity2.nameEntity }}Mock
                {%- else %}
        from .{{ relationship.entity1.nameEntity }}Mock import {{ relationship.entity1.nameEntity }}Mock
                {%- endif %}
            {%- endif %}
        {%- endfor %}
        entity = self.createEntityWithoutRelationship(id)
        {%- if entity.relationships | length > 0 %}
        with app.app_context():
            {%- for relationship in entity.relationships -%}    
            {%- if relationship.isOneToOne %}
            {%- if relationship.entity1 == entity %}
            if {{ relationship.entity2.nameEntity | lower }} == None:
                {{ relationship.entity2.nameEntity | lower }}Mock = {{ relationship.entity2.nameEntity }}Mock()
                {{ relationship.entity2.nameEntity | lower }}Entity = {{ relationship.entity2.nameEntity | lower }}Mock.createEntityWithRelationship({{ entity.nameEntity | lower }} = entity)
                entity.{{ relationship.entity2.nameEntity | lower }} = {{ relationship.entity2.nameEntity | lower }}Entity
            else:
                entity.{{ relationship.entity2.nameEntity | lower }} = {{ relationship.entity2.nameEntity | lower }}
            {%- else %}
            if {{ relationship.entity1.nameEntity | lower }} == None:
                {{ relationship.entity1.nameEntity | lower }}Mock = {{ relationship.entity1.nameEntity }}Mock()
                {{ relationship.entity1.nameEntity | lower }}Entity = {{ relationship.entity1.nameEntity | lower }}Mock.createEntityWithRelationship({{ entity.nameEntity | lower }} = entity)
                entity.{{ relationship.entity1.nameEntity | lower }}_{{ relationship.entity1.getPrimaryKey().nameColumn }} = {{ relationship.entity1.nameEntity | lower }}Entity.{{ relationship.entity1.getPrimaryKey().nameColumn }}
            else:
                entity.{{ relationship.entity1.nameEntity | lower }}_{{ relationship.entity1.getPrimaryKey().nameColumn }} = {{ relationship.entity1.nameEntity | lower }}.{{ relationship.entity1.getPrimaryKey().nameColumn }}
            {%- endif %}
            {%- elif relationship.isManyToOne %}
            {%- if relationship.entity1 == entity %}
            if {{ relationship.entity2.nameEntity | lower }} == None:
                {{ relationship.entity2.nameEntity | lower }}Mock = {{ relationship.entity2.nameEntity }}Mock()
                {{ relationship.entity2.nameEntity | lower }}Entity = {{ relationship.entity2.nameEntity | lower }}Mock.createEntityWithRelationship({{ entity.nameEntity | lower }} = entity)
                entity.{{ relationship.entity2.nameEntity | lower }}_{{ relationship.entity2.getPrimaryKey().nameColumn }} = {{ relationship.entity2.nameEntity | lower }}Entity.{{ relationship.entity2.getPrimaryKey().nameColumn }}
            else:
                entity.{{ relationship.entity2.nameEntity | lower }}_{{ relationship.entity2.getPrimaryKey().nameColumn }} = {{ relationship.entity2.nameEntity | lower }}.{{ relationship.entity2.getPrimaryKey().nameColumn }}  
            {% else %}
            if {{ relationship.entity1.nameEntity | lower }} == None:
                {{ relationship.entity1.nameEntity | lower }}Mock = {{ relationship.entity1.nameEntity }}Mock()
                {{ relationship.entity1.nameEntity | lower }}Entity = {{ relationship.entity1.nameEntity | lower }}Mock.createEntityWithRelationship({{ entity.nameEntity | lower }} = entity)
                {{ relationship.entity1.nameEntity | lower }} = {{ relationship.entity1.nameEntity | lower }}Entity
            entity.{{ relationship.entity1.nameEntity | lower }} = [{{ relationship.entity1.nameEntity | lower }}]
            {%- endif %}
            {%- elif relationship.isOneToMany %}
            {%- if relationship.entity1 == entity %}
            if {{ relationship.entity2.nameEntity | lower }} == None:
                {{ relationship.entity2.nameEntity | lower }}Mock = {{ relationship.entity2.nameEntity }}Mock()
                {{ relationship.entity2.nameEntity | lower }}Entity = {{ relationship.entity2.nameEntity | lower }}Mock.createEntityWithRelationship({{ entity.nameEntity | lower }} = entity)
                {{ relationship.entity2.nameEntity | lower }} = {{ relationship.entity2.nameEntity | lower }}Entity
            entity.{{ relationship.entity2.nameEntity | lower }} = [{{ relationship.entity2.nameEntity | lower }}]
            {%- else %}
            if {{ relationship.entity1.nameEntity | lower }} == None:
                {{ relationship.entity1.nameEntity | lower }}Mock = {{ relationship.entity1.nameEntity }}Mock()
                {{ relationship.entity1.nameEntity | lower }}Entity = {{ relationship.entity1.nameEntity | lower }}Mock.createEntityWithRelationship({{ entity.nameEntity | lower }} = entity)
                entity.{{ relationship.entity1.nameEntity | lower }}_{{ relationship.entity1.getPrimaryKey().nameColumn }} = {{ relationship.entity1.nameEntity | lower }}Entity.{{ relationship.entity1.getPrimaryKey().nameColumn }}
            else:
                entity.{{ relationship.entity1.nameEntity | lower }}_{{ relationship.entity1.getPrimaryKey().nameColumn }} = {{ relationship.entity1.nameEntity | lower }}.{{ relationship.entity1.getPrimaryKey().nameColumn }}
            {%- endif %}
            {%- else %}
            {%- if relationship.entity1 == entity %}
            if {{ relationship.entity2.nameEntity | lower }} == None:
                {{ relationship.entity2.nameEntity | lower }}Mock = {{ relationship.entity2.nameEntity }}Mock()
                {{ relationship.entity2.nameEntity | lower }}Entity = {{ relationship.entity2.nameEntity | lower }}Mock.createEntityWithRelationship({{ entity.nameEntity | lower }} = entity)
                {{ relationship.entity2.nameEntity | lower }} = {{ relationship.entity2.nameEntity | lower }}Entity
            entity.{{ relationship.entity2.nameEntity | lower }} = [{{ relationship.entity2.nameEntity | lower }}]
            {%- else %}
            if {{ relationship.entity1.nameEntity | lower }} == None:
                {{ relationship.entity1.nameEntity | lower }}Mock = {{ relationship.entity1.nameEntity }}Mock()
                {{ relationship.entity1.nameEntity | lower }}Entity = {{ relationship.entity1.nameEntity | lower }}Mock.createEntityWithRelationship({{ entity.nameEntity | lower }} = entity)
                {{ relationship.entity1.nameEntity | lower }} = {{ relationship.entity1.nameEntity | lower }}Entity
            entity.{{ relationship.entity1.nameEntity | lower }} = [{{ relationship.entity1.nameEntity | lower }}]
            {%- endif -%}
            {%- endif -%}
            {%- endfor %}
        {%- endif %}
        return entity

    def createMalformedEntity(self):
        return {{ entity.nameEntity }}Entity()

    def getNEntity(self, n: int) -> List[ {{ entity.nameEntity }}Entity]:
        l = list()

        for _ in range(n):
            l.append(self.createEntityWithRelationship())

        return l