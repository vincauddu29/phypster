from flask import Flask, jsonify
from flask_migrate import Migrate
from flask_jwt_extended import JWTManager
from .config import DevConfig, ProdConfig
from flask_marshmallow import Marshmallow
from flask_sqlalchemy import SQLAlchemy
from flask_restful import Api
import os
import logging
import securityConfig as security

env = os.environ.get('WEBAPP_ENV', 'dev')

def page_not_found(error):
    resp = jsonify({
        "msg" : "Not Found"
    })
    resp.status_code = 404
    return resp

def error_system(error):
    resp = jsonify({
        "msg" : "Error Intern"
    })
    resp.status_code = 500
    return resp

def createApp():
    if env == 'dev':
        config = DevConfig
    else:
        config = ProdConfig

    app = Flask(__name__)
    app.config.from_object(config)

    app.register_error_handler(404, page_not_found)
    app.register_error_handler(500, error_system)
    
    return app

############
# app init #
############
db = SQLAlchemy()
moduleSecurityChecker = security.ModuleSecurityChecker()
app = createApp()
db.init_app(app)
migrate = Migrate(app, db)
jwt = JWTManager(app)
api = Api(app)

#######################################
# register routes and security policy #
#######################################
{%- for entity in entities %}
from src.Ressources.{{ entity.nameEntity }}Ressource import {{ entity.nameEntity }}Ressource
{%- endfor %}
{% for entity in entities %}
api.add_resource({{ entity.nameEntity }}Ressource, '/{{ entity.nameEntity }}')
moduleSecurityChecker.addPath(security.Path('/{{ entity.nameEntity }}', policy=security.SecurityPolicyEnum.JWT))
{%- endfor %}

@app.before_request
def before_request():
    moduleSecurityChecker.checkPath(request)