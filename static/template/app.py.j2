from flask import Flask, jsonify
from flask_migrate import Migrate
from flask_jwt_extended import JWTManager
from .config import DevConfig, ProdConfig
from flask_marshmallow import Marshmallow
from flask_sqlalchemy import SQLAlchemy
from flask_restful import Api
import os
import logging

env = os.environ.get('WEBAPP_ENV', 'dev')

#Â logging
formatter = logging.Formatter("%(asctime)s -- %(name)s -- %(levelname)s -- %(message)s")

handler_critic = logging.FileHandler("src/Logs/critic.log", mode="a", encoding="utf-8")
handler_info = logging.FileHandler("src/Logs/info.log", mode="a", encoding="utf-8")
handler_error = logging.FileHandler("src/Logs/error.log", mode="a", encoding="utf-8")
handler_debug = logging.FileHandler("src/Logs/debug.log", mode="a", encoding="utf-8")

handler_critic.setFormatter(formatter)
handler_info.setFormatter(formatter)
handler_error.setFormatter(formatter)
handler_debug.setFormatter(formatter)

handler_info.setLevel(logging.INFO)
handler_critic.setLevel(logging.CRITICAL)
handler_error.setLevel(logging.ERROR)
handler_debug.setLevel(logging.DEBUG)

logger = logging.getLogger(__name__)

if env == 'dev':
    logger.setLevel(logging.DEBUG)
else:
    logger.setLevel(logging.WARNING)
logger.addHandler(handler_critic)
logger.addHandler(handler_info)
logger.addHandler(handler_error)
logger.addHandler(handler_debug)

db = SQLAlchemy()

def page_not_found(error):
    resp = jsonify({
        "msg" : "Not Found"
    })
    resp.status_code = 404
    return resp

def error_system(error):
    resp = jsonify({
        "msg" : "Error Intern"
    })
    resp.status_code = 500
    return resp

def createApp():
    if env == 'dev':
        config = DevConfig
    else:
        config = ProdConfig

    app = Flask(__name__)
    app.config.from_object(config)

    # db.init_app(app)
    # migrate.init_app(app, db)
    # jwt.init_app(app)
    # ma.init_app(app)

    app.register_error_handler(404, page_not_found)
    app.register_error_handler(500, error_system)
    
    return app

app = createApp()

db.init_app(app)
migrate = Migrate(app, db)
jwt = JWTManager(app)
# ma = Marshmallow(app)
api = Api(app)

{%- for entity in entities %}
from src.Ressources.{{ entity.nameEntity }}Ressource import {{ entity.nameEntity }}Ressource
{%- endfor %}

# register routes
{% for entity in entities %}
# {{ entity.nameEntity }}Ressource.register(app)
api.add_resource({{ entity.nameEntity }}Ressource, '/{{ entity.nameEntity }}')
{%- endfor %}